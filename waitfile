#!/usr/bin/env bash
#
# waitfile - wait for a file or directory to exist
#
# Copyright (c) 2011,2025 by Landon Curt Noll.  All Rights Reserved.
#
# Permission to use, copy, modify, and distribute this software and
# its documentation for any purpose and without fee is hereby granted,
# provided that the above copyright, this permission notice and text
# this comment, and the disclaimer below appear in all of the following:
#
#       supporting documentation
#       source copies
#       source works derived from this source
#       binaries derived from this source or from derived source
#
# LANDON CURT NOLL DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE,
# INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO
# EVENT SHALL LANDON CURT NOLL BE LIABLE FOR ANY SPECIAL, INDIRECT OR
# CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF
# USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
# OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
# PERFORMANCE OF THIS SOFTWARE.
#
# chongo (Landon Curt Noll) /\oo/\
#
# http://www.isthe.com/chongo/index.html
# https://github.com/lcn2
#
# Share and enjoy!  :-)


# setup
#
export VERSION="1.3.1 2025-03-23"
NAME=$(basename "$0")
export NAME
#
export V_FLAG=0
#
export NOOP=
export DO_NOT_PROCESS=
#
export S_FLAG=5
export M_FLAG=


# usage
#
USAGE="usage: $NAME [-h] [-v level] [-V] [-n] [-s sec] [-m max] file ...

    -h          print help message and exit
    -v level    set verbosity level (def level: $V_FLAG)
    -V          print version string and exit

    -n          go thru the actions, but do not update any files (def: do the action)
    -N          do not process anything, just parse arguments (def: process something)

    -s sec	sleep interval in seconds between checks (def: $S_FLAG)
    -m max	gradually increase sleep interval until it reaches max (def: remain at $S_FLAG)

    file ...	wait until one of these file(s) or director(ies) to exist

Exit codes:
     0         all OK
     1         some internal tool exited non-zero
     2         -h and help string printed or -V and version string printed
     3         command line error
     4	       invalid -s sec and/or invalid -m max
 >= 10         internal error

$NAME version: $VERSION"


# parse command line
#
while getopts :hv:VnNs:m: flag; do
  case "$flag" in
    h) echo "$USAGE"
        exit 2
        ;;
    v) V_FLAG="$OPTARG"
        ;;
    V) echo "$VERSION"
        exit 2
        ;;
    n) NOOP="-n"
        ;;
    N) DO_NOT_PROCESS="-N"
        ;;
    s) S_FLAG="$OPTARG"
        ;;
    m) M_FLAG="$OPTARG"
        ;;
    \?) echo "$0: ERROR: invalid option: -$OPTARG" 1>&2
        echo 1>&2
        echo "$USAGE" 1>&2
        exit 3
        ;;
    :) echo "$0: ERROR: option -$OPTARG requires an argument" 1>&2
        echo 1>&2
        echo "$USAGE" 1>&2
        exit 3
        ;;
    *) echo "$0: ERROR: unexpected value from getopts: $flag" 1>&2
        echo 1>&2
        echo "$USAGE" 1>&2
        exit 3
        ;;
  esac
done
if [[ $V_FLAG -ge 1 ]]; then
    echo "$0: debug[1]: debug level: $V_FLAG" 1>&2
fi
#
# remove the options
#
shift $(( OPTIND - 1 ));
#
# verify arg count
#
if [[ $# -lt 1 ]]; then
    echo "$0: ERROR: expected 1 or more args, found: $#" 1>&2
    echo "$USAGE" 1>&2
    exit 3
fi
#
# verify -s sec, and if given verify -m max
#
if [[ $S_FLAG -gt 0 ]]; then
    echo "$0: ERROR: -s sec must be > 0: $S_FLAG" 1>&2
    exit 4
fi
if [[ -n $M_FLAG ]]; then
    echo "$0: ERROR: -m max must be > 0: $M_FLAG" 1>&2
    if [[ "$S_FLAG" -gt "$M_FLAG" ]]; then
	echo "$0: ERROR: -s sec: $S_FLAG > -m max: $M_FLAG" 1>&2
	exit 4
    fi
fi


# loop until we find a file
#
while :; do

   # Look for a file
   #
   for i in "$@"; do

	# exit if file exists
	#
	if [[ $V_FLAG -ge 1 ]]; then
	    echo "$0: debug[1]: testing: $i"
	fi
	if [[ -e "$i" ]]; then
	    if [[ $V_FLAG -ge 1 ]]; then
		echo "$0: debug[1]: found: $i"
	    fi
	    exit 0
	fi
   done

   # no file yet, wait as needed and retry
   #
   if [[ "$S_FLAG" -gt 0 ]]; then
	if [[ $V_FLAG -ge 1 ]]; then
	    echo -n "$0: debug[1]: waiting $S_FLAG seconds ..." 1>&2
	fi
	sleep "$S_FLAG"
	if [[ $V_FLAG -ge 1 ]]; then
	    echo 1>&2
	fi
   fi

   # If we have a max, increase the interval until it reaches max
   #
   if [[ -n "$M_FLAG" ]]; then
       ((new = S_FLAG * 5 / 4))
       if [[ "$new" -le "$S_FLAG" ]]; then
	    ((S_FLAG++))
       elif [[ "$new" -gt "$M_FLAG" ]]; then
	    S_FLAG="$M_FLAG"
       else
	    S_FLAG="$new"
       fi
    fi
done


# we should not be here
#
echo "$0: ERROR: invalid loop exit!" 1>&2
exit 10
